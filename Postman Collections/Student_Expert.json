{
  "info": {
    "_postman_id": "22c9ed97-a400-4114-8c0d-fca15cc66bff",
    "name": "Student Expert",
    "description": "Learn the skills to become a certified Postman Student Expert.\n\n__Fork__ this collection into your own workspace, send the first request and follow the instructions!",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "1. Begin training - Requests",
      "item": [
        {
          "name": "0. Start training",
          "id": "cf39c162-b566-4d25-9f20-4730ad961522",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{training_api}}/training"
          },
          "response": []
        },
        {
          "name": "1. Get matches",
          "id": "a42acdff-5f8d-42b7-b712-827020f55ef1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{training_api}}/matches?status=played",
              "host": [
                "{{training_api}}"
              ],
              "path": [
                "matches"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "played"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "2. Add Match",
          "id": "3ffd244e-f2c6-4b27-92fc-9372f793a34c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"match\": \"Cup Final\",\r\n  \"when\": \"{{$randomDateFuture}}\",\r\n  \"against\": \"Academical\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{training_api}}/match"
          },
          "response": []
        },
        {
          "name": "3. Update Score",
          "id": "d63b2cfc-6501-421f-b9f2-3bc661197119",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"points\": 3\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "{{training_api}}/match?match_id=DimSE-vE0",
              "host": [
                "{{training_api}}"
              ],
              "path": [
                "match"
              ],
              "query": [
                {
                  "key": "match_id",
                  "value": "DimSE-vE0",
                  "type": "text"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "4. Remove Match",
          "id": "1c927b4c-7439-4343-a53e-5ffd2e169d13",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{training_api}}/match/:match_id",
              "host": [
                "{{training_api}}"
              ],
              "path": [
                "match",
                ":match_id"
              ],
              "variable": [
                {
                  "key": "match_id",
                  "value": "DimSE-vE0"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "id": "a0bb4edc-bfe2-4a36-9217-584de11db97f"
    },
    {
      "name": "2. Scripting and Collection Runs",
      "item": [
        {
          "name": "Get all players",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2a2684bd-8655-4c3b-ac68-660a07f670ee",
                "exec": [
                  "pm.test('Status code is 400', function () {\r",
                  "    pm.response.to.have.status(400); \r",
                  "});\r",
                  "\r",
                  "var player_list=pm.response.json().data.players;\r",
                  "pm.environment.set('player_id', player_list[Math.floor(Math.random() * player_list.length)].id);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a7cbf13f-d036-47b1-81eb-22457f538d99",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "afabf3a3-1278-4789-b444-5cd11031826b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{mock_url}}/players"
          },
          "response": []
        },
        {
          "name": "Get specific player",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f133daaf-8995-457c-8092-eed8cdff0de3",
                "exec": [
                  "pm.test('Status code is 200', function () {\r",
                  "    pm.response.to.have.status(200); \r",
                  "});\r",
                  "\r",
                  "if(pm.response.json().data.played<750) postman.setNextRequest('Get all players');"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "572d82b6-9c2f-41db-9ce2-92222296a194",
                "exec": [
                  "if(!pm.variables.get('player_id')) pm.variables.set('player_id', -1)"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "f60fa7b1-1ec1-498e-b42e-e8b029883946",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{mock_url}}/player?id={{player_id}}",
              "host": [
                "{{mock_url}}"
              ],
              "path": [
                "player"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{player_id}}"
                }
              ]
            },
            "description": "This request accepts an integer id which serves as a unique key assigned to a player in the database and returns their name.\n\nThis id is stored in a variable 'player_id' in  a virtual environment which may be randomly populated by sending the request 'Get all players'. In case this request is the first to run before 'Get all players', the id is assigned a value of -1."
          },
          "response": []
        },
        {
          "name": "Get stats",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "78967051-1f72-44c4-8f9d-c014f780eca0",
                "exec": [
                  "pm.test('Stats include all fields', function () {\r",
                  "    var jsonData = pm.response.json().data;\r",
                  "    pm.expect(jsonData).to.have.all.keys('won', 'lost', 'drew');\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "4db94f6a-178e-4f05-8121-e7dce097118e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "{{mock_url}}/stats"
          },
          "response": []
        }
      ],
      "id": "7eafa839-cada-4351-a9d5-16ab951e0ab8"
    },
    {
      "name": "3. Check Progress",
      "item": [
        {
          "name": "Skill check",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d564cd3a-2346-43b8-8e2d-ad5b679ee9e4",
                "exec": [
                  "var rand = pm.response.json().rand;\r",
                  "pm.collectionVariables.set('responseData', rand);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "6f33c67b-97bb-4bce-aaad-730d53262a04",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "d0808899-ad3c-4c6f-910d-38940df2a889",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "apikey",
              "apikey": {
                "value": "loads",
                "key": "auth_key"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "user-id",
                "value": "{{userId}}",
                "type": "text",
                "description": "plz don't edit or remove this header"
              },
              {
                "key": "course",
                "value": "{{myCourse}}",
                "type": "text",
                "description": "plz don't edit or remove this header"
              },
              {
                "key": "response-value",
                "value": "{{responseData}}",
                "type": "text",
                "description": "plz don't edit or remove this header"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"name\": \"Mehul\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "postman-skill-checker.glitch.me/skills?email=mehultodi.201cs133@nitk.edu.in",
              "host": [
                "postman-skill-checker",
                "glitch",
                "me"
              ],
              "path": [
                "skills"
              ],
              "query": [
                {
                  "key": "email",
                  "value": "mehultodi.201cs133@nitk.edu.in"
                }
              ]
            },
            "description": "Hit **Send**, complete each requirement and keep sending until you get a success response!"
          },
          "response": []
        },
        {
          "name": "Test collection",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b08d8011-f64d-4ca4-8a9a-0c2b250e405a",
                "exec": [
                  "//auth details at collection level",
                  "let authObj = pm.response.json().auth;",
                  "//request array",
                  "let requestArr = pm.response.json().item[0].item;",
                  "//mock array ",
                  "let mockArr = pm.response.json().item[1].item;",
                  "//checks array",
                  "let checksArr = pm.response.json().item[2].item; ",
                  "",
                  "//info",
                  "pm.test(\"Once all of your tests are passing, save your collection, update the link via the Share flow, and submit it: bit.ly/student-expert-submission\", () =>{",
                  "    pm.expect(true).to.eql(true);",
                  "});",
                  "",
                  "//collection name is correct",
                  "let nameCorrect=false;",
                  "pm.test('Correct collection name', () => {",
                  "    let studIndex = pm.response.json().info.name.indexOf(\"Student expert\");",
                  "    let classIndex = pm.response.json().info.name.indexOf(\"Classroom\");",
                  "    nameCorrect = studIndex>-1 || classIndex>-1;",
                  "    pm.expect(nameCorrect).to.eql(true);",
                  "});",
                  "",
                  "//used auth",
                  "pm.test(\"Authorized requests\", () => {",
                  "    pm.expect(authObj).to.be.an(\"object\");",
                  "    pm.expect(authObj).to.have.property(\"apikey\"); ",
                  "    console.log(authObj);",
                  "});",
                  "",
                  "//used all required methods",
                  "pm.test(\"Used GET, POST, PUT, DELETE methods\", () => {",
                  "    //first folder should have all methods in requests",
                  "    let methArr = requestArr.map(value => value.request.method); ",
                  "    console.log(methArr);",
                  "    pm.expect(methArr).to.include.members([\"GET\", \"POST\", \"PUT\", \"DELETE\"]);",
                  "});",
                  "",
                  "//used params - query and path",
                  "pm.test(\"Used query and path parameters\", () => {",
                  "    //first folder should have query",
                  "    let queryArr = requestArr.filter(value => value.request.url.query).map(value => value.request.url.query);",
                  "    console.log(queryArr);",
                  "    pm.expect(queryArr).to.have.length.of.above(0);",
                  "    //first folder should also have path",
                  "    let pathArr = requestArr.filter(value => value.request.url.path).map(value => value.request.url.path);",
                  "    var pathParams = pathArr.flat().filter(p => p.startsWith(':')); ",
                  "    console.log(pathParams);",
                  "    pm.expect(pathParams).to.have.length.of.above(0);",
                  "});",
                  "",
                  "//sent body",
                  "pm.test(\"Sent body data\", () => {",
                  "    //first folder should have a body",
                  "    let bodyArr = requestArr.filter(value => value.request.body).map(value => value.request.body); ",
                  "    console.log(bodyArr);",
                  "    pm.expect(bodyArr).to.have.length.of.above(0);",
                  "});",
                  "",
                  "//used vars",
                  "pm.test(\"Used variables\", () => {",
                  "    //should be a var reference in query param for mock folder",
                  "    let varsArr = mockArr.filter(value => value.request.url.query).map(value => value.request.url.query);",
                  "    let queries = varsArr.flat().filter(value => value.value).map(value => value.value);",
                  "    var queryVars = queries.filter(p => encodeURI(p).indexOf('%7B%7B')>-1); ",
                  "    console.log(queryVars);",
                  "    pm.expect(queryVars).to.have.length.of.above(0);",
                  "    //base path for main folder should also use var",
                  "    //url is object when path or query param, string otherwise",
                  "    let addresses = requestArr.filter(value => value.request.url.raw ? value.request.url.raw : value.request.url).map(value => value.request.url.raw ? value.request.url.raw : value.request.url);",
                  "    var addressVars = addresses.filter(p => encodeURI(p).indexOf('%7B%7B')>-1); ",
                  "    console.log(addressVars);",
                  "    pm.expect(addressVars).to.have.length.of.above(0);",
                  "    //auth should also use var",
                  "    pm.expect(encodeURI(authObj.apikey.value).indexOf('%7B%7B')).to.be.above(-1);",
                  "",
                  "});",
                  "",
                  "//assed description",
                  "pm.test(\"Added request description\", () => {",
                  "    //second folder should have a description",
                  "    let descArr = mockArr.filter(value => value.request.description).map(value => value.request.description);",
                  "    console.log(descArr);",
                  "    pm.expect(descArr).to.have.length.of.above(0);",
                  "});",
                  "",
                  "//set var from script and next request - make it env var so we check that too",
                  "pm.test(\"Set env variable from script and set next request\", () => {",
                  "    //second folder should have set var and next req",
                  "    let testsArr = mockArr.filter(value => value.event).map(value => value.event); ",
                  "    console.log(testsArr);",
                  "    let execArr = testsArr.flat().filter(value => value.script.exec).map(value => value.script.exec); ",
                  "    var setsVars = execArr.flat().filter(p => p.indexOf('environment.set(')>-1); ",
                  "    console.log(setsVars);",
                  "    pm.expect(setsVars).to.have.length.of.above(0);",
                  "    var setsReqs = execArr.flat().filter(p => p.indexOf('.setNextRequest')>-1); ",
                  "    console.log(setsReqs);",
                  "    pm.expect(setsReqs).to.have.length.of.above(0);",
                  "});",
                  "//add skill check test",
                  "pm.test('Skills checked', () =>{",
                  "    var vars = pm.response.json().variable.map(value => value.key);",
                  "    pm.expect(vars).to.include('skilled');",
                  "});",
                  "//check pulled response property",
                  "pm.test('Skill check code retrieving set var value from response property', () => {",
                  "    //need to make sure set var from response json in skill check request - third folder",
                  "        //need to make sure set var from response json in skill check request - third folder",
                  "    let scr = JSON.stringify(checksArr[0].event[0].script);",
                  "    let resParse = scr.indexOf('pm.response.json')>-1 || scr.indexOf('.rand')>-1;",
                  "    pm.expect(resParse).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "id": "83b0ba88-fd3e-4eb9-bc5f-d8774577bc66",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": "https://www.getpostman.com/collections/4da81d416485e2458c6b",
            "description": "Paste your collection public link in as the address and send, checking the test results to see if you completed this step."
          },
          "response": []
        }
      ],
      "id": "01000515-b2c6-4941-86ab-82e94e077f82",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "90d57846-fa74-4431-921d-43b3cef45a00",
            "type": "text/javascript",
            "exec": [
              "var uID = pm.collectionVariables.get(\"userId\");",
              "if(!uID)",
              "    pm.collectionVariables.set(\"userId\", pm.variables.replaceIn('{{$guid}}'));",
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "e41bde3e-412a-4066-b264-e8b9b2df14b2",
            "type": "text/javascript",
            "exec": [
              "var template = `",
              "<!--showdown for converting md to html-->",
              "    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js\"></script>",
              "    <script type=\"text/javascript\">",
              "        function getContent(orig){",
              "            var converter = new showdown.Converter(), text = orig, html = converter.makeHtml(text);",
              "            return html;",
              "        }",
              "    </script>",
              "<h1>{{response.title}}</h1>",
              "<p>",
              "<script type=\"text/javascript\">",
              "    document.write(getContent(\"{{response.intro}}\"));",
              "</script>",
              "</p>",
              "<div id='skills'></div>",
              "<script type=\"text/javascript\">",
              "pm.getData(function(error, data) {",
              "    let skills=data.response.skills; let i; let skillList=\"\"; console.log(skills.length)",
              "    for(i=0; i<skills.length; i++){",
              "        let done = skills[i].value ? \"&#9989;\" : \"&#10060;\"",
              "        skillList+=\"<strong>\"+skills[i].name+\"</strong> \"+done+\"<br/>\"+skills[i].hint+\"<br/>\";",
              "    }",
              "    document.getElementById('skills').innerHTML=skillList;",
              "});",
              "</script>",
              "`;",
              "",
              "// Set visualizer",
              "pm.visualizer.set(template, {",
              "    // Pass the response body parsed as JSON as `data`",
              "    response: pm.response.json()",
              "});",
              "",
              "if(pm.response.json().done) pm.collectionVariables.set('skilled', true);"
            ]
          }
        }
      ]
    }
  ],
  "auth": {
    "type": "apikey",
    "apikey": {
      "key": "match_key",
      "value": "{{email_key}}"
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "9df48f72-6bd4-42cc-a56b-d2acfd28c97e",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "8e34c484-67a9-4d61-b2ab-1aa72aa30dc9",
        "type": "text/javascript",
        "exec": [
          "var template = `",
          "    <!--showdown for converting md to html-->",
          "    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/showdown/1.9.1/showdown.min.js\"></script>",
          "    <script type=\"text/javascript\">",
          "        function getContent(orig){",
          "            var converter = new showdown.Converter(), text = orig, html = converter.makeHtml(text);",
          "            return html;",
          "        }",
          "    </script>",
          "    ",
          "    <!--syntax highlighting-->",
          "    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/styles/default.min.css\">",
          "    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/highlight.min.js\"></script>",
          "    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/10.0.0/styles/googlecode.min.css\">",
          "    ",
          "    <!--generic styles-->",
          "    <style type=\"text/css\">",
          "    #notes p, #next p {padding-left:20px; border-left:2px solid #333333; }",
          "    #notes, #next {padding-right:20px;}",
          "    img {max-width:600px; padding-left:20px; padding-bottom:20px;}",
          "    </style>",
          "",
          "    <h2 style=\"color: {{status}}\">{{response.tutorial.title}}</h2>",
          "    ",
          "    <div id=\"intro\"></div>",
          "",
          "    <div id=\"notes\"></div>",
          "    ",
          "    {{#if response.tutorial.next}}",
          "    <h3>Next</h3>",
          "    <div id=\"next\"></div>",
          "    {{/if}}",
          "    ",
          "    <script type=\"text/javascript\">",
          "        if(\"{{response.tutorial.rip}}\".length>0)",
          "            document.write(getContent(\"{{response.tutorial.rip}}\"));",
          "    </script>",
          "    ",
          "    <script type=\"text/javascript\">",
          "        if(\"{{response.tutorial.pic}}\".length>0)",
          "            document.write(\"<img src='{{response.tutorial.pic}}' alt='postman steps'/>\");",
          "    </script>",
          "",
          "    <!--content to process before rendering-->",
          "    <script type=\"text/javascript\">",
          "        pm.getData(function(error, data) {",
          "            var tut = data.response.tutorial;",
          "            if(tut){",
          "                if(tut.steps){",
          "                    var i; ",
          "                    var infoArray = tut.steps;",
          "                    var notes=\"<div id='notes'>\";",
          "                    for(i=0; i<infoArray.length; i++){",
          "                        notes+=getContent(infoArray[i].note);",
          "                        if(infoArray[i].raw_data){",
          "                            notes+=\"<pre style='padding-left:20px'><code class='json'>\"+JSON.stringify(infoArray[i].raw_data, null, 2)+\"</code></pre>\";",
          "                        }",
          "                        if(infoArray[i].js_code){",
          "                            var c;",
          "                            notes+=\"<pre style='padding-left:20px'><code class='js'>\";",
          "                            for(c=0; c<infoArray[i].js_code.length; c++)",
          "                                notes+=infoArray[i].js_code[c]+\"<br/>\";",
          "                            notes+=\"</code></pre>\";",
          "                        }",
          "                        if(infoArray[i].ref_data){",
          "                            notes+=\"<pre style='padding-left:20px'><code class='json'>\"+JSON.stringify(data.response[infoArray[i].ref_data], null, 2)+\"</code></pre>\";",
          "                        }",
          "                        if(infoArray[i].pic)",
          "                            notes+=\"<img src='\"+infoArray[i].pic+\"' alt='postman steps'/>\";",
          "                    }",
          "                    notes+=\"</div>\"",
          "                    document.getElementById(\"notes\").innerHTML=notes;",
          "                }",
          "                document.getElementById(\"intro\").innerHTML=getContent(tut.intro);",
          "                if(tut.next){",
          "                    var nextDiv=document.getElementById(\"next\");",
          "                    var n;",
          "                    var nextContent=\"\";",
          "                    var nextArray=tut.next;",
          "                    for(n=0; n<nextArray.length; n++){",
          "                        nextContent+=getContent(nextArray[n].step);",
          "                        if(nextArray[n].raw_data){",
          "                            nextContent+=\"<pre style='padding-left:20px'><code class='json'>\"+JSON.    stringify(nextArray[n].raw_data, null, 2)+\"</code></pre>\";",
          "                        }",
          "                        if(nextArray[n].js_code){",
          "                            var c;",
          "                            nextContent+=\"<pre style='padding-left:20px'><code class='js'>\";",
          "                            for(c=0; c<nextArray[n].js_code.length; c++)",
          "                                nextContent+=nextArray[n].js_code[c];",
          "                            nextContent+=\"</code></pre>\";",
          "                        }",
          "                        if(nextArray[n].pic)",
          "                            nextContent+=\"<img src='\"+nextArray[n].pic+\"' alt='postman steps'/>\";",
          "                    }",
          "                    nextDiv.innerHTML=getContent(nextContent);",
          "                }",
          "            }",
          "            hljs.initHighlighting();",
          "        });",
          "    </script>",
          "`;",
          "if (pm.response.headers.get(\"Content-Type\").includes(\"json\")) {",
          "  pm.visualizer.set(template, {",
          "    response: pm.response.json(),",
          "    status: (\"\" + pm.response.code).startsWith(\"4\") ? \"#cc0000\" : \"#000000\"",
          "  });",
          "} else if (pm.response.headers.get(\"Content-Type\").includes(\"html\")) {",
          "  pm.visualizer.set(`{{info}}`, {",
          "    info:",
          "      \"Hmm this seems to be HTML and not JSON - you might have hit an invalid endpoint - undo your changes, or close the request without saving and try opening / sending it again!\"",
          "  });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "ae4878d4-2bbb-4691-9bec-04952173586a",
      "key": "mock_url",
      "value": "https://d78ddda7-4a57-40b3-badf-fa500035e260.mock.pstmn.io"
    },
    {
      "id": "c5a75298-2a67-4559-9105-b662b5f27a08",
      "key": "userId",
      "value": ""
    },
    {
      "id": "dc3f3a7b-f103-4d1c-bb10-07cb2892801a",
      "key": "training_api",
      "value": "postman-student-expert.glitch.me"
    },
    {
      "id": "64680f73-08ea-45e3-9f41-34e10377caa3",
      "key": "email_key",
      "value": "mehultodi.201cs133@nitk.edu.in"
    },
    {
      "id": "a932868f-8221-479d-8123-9085982bc01b",
      "key": "myCourse",
      "value": ""
    },
    {
      "id": "bc5cf8c2-35c5-40f9-8166-37cebd8457e8",
      "key": "responseData",
      "value": ""
    },
    {
      "id": "627c6427-b753-4722-8746-3940234f81a6",
      "key": "skilled",
      "value": ""
    }
  ]
}